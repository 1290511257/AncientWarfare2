Licensing
	add bc license for using as libs

core
	crafting system--needs recipes from other modules
	research system--needs definitions of research for research tree
	block and item textures (engineering station, research station, research book, research notes)
	Chunkloader blocks
	Implement tile-based rotatable block -- twenty-four way

GUIS (all modules)
	need LOTS of tooltips added to various elements	
	Finish creating proper text-input validation stuff for Text and NumberInput widgets
	SHIFT-CLICK CODE
	rendering of item stack quantities >99 -- need to do custom rendering of text, scaled down appropriately

TEXTURES
	core
	automation
		warehouse input
		warehouse output
		warehouse storage small
		warehouse storage medium 
		warehouse storage large
		warehouse crafting station
		hand-cranked-engine
		sterling generator
		waterwheel generator
		distribution block
	structure
		drafting station
		structure scanner
		structure builder
	npc
	vehicle
	
modeler
	who knows.... will need to start using it to find out what is broken / not working, will need it in vehicle module
	
structures module
	--need to examine all plugins for places when item-stacks are saved to the tile/entity nbt -- need to handle these special and sideline the
		item-data to preserve the item-name rather than item-id.
		
	Recipes Needed:
		ALL (except for templates in drafting station)
	Scanner GUI needs some cleanup / make it look nice
	plugins / support for vehicle module
	plugin support for automation module
	plugin support for npc module
		npcs--done
		blocks--
			town-hall
			structure-control block
	template plugin support for gates
	textures for drafting station, survival-mode builder block
	rework gates as a multi-block? (use controller TE TESR to render gate)
		at that point, can use blocks for collision and interaction
		probably less buggy than the entity-based interaction
		but how to handle only partially loaded gates?

automation module:	
	Add rendering of work-site sizes while holding a work-site setting item.

	Change over worksite BB render to a TESR -- should be slightly more optimized
	
	worksites that need work:
	
	worksites needed:
		Smeltery multiblock -- ore processing
			Smeltery control block (worksite)
			Smeltery heater/smelting block
			Smeltery input block
			Smeltery output block
		Lumberyard multiblock -- wood processing
	
	Custom renders for power-states on power tiles?  Optional?
		would require a client-side config on whether to use custom render
		would also require a server-side config on whether to send the network data or not
		would need a change in block rendering for opacity/cutaway 
			and a TESR implemented for rendering of state
	
	Torque API:
		Add input max/tick code to tiles, reset counter every tile-update.
		Add power-loss to blocks.  The amount lost should be proportional to the amount stored.  Something about
			drag from air resistance increasing with the speed of the object that is moving. Allow for higher-grade blocks to not lose power.			
		Add high-quality blocks with higher capacity and less/no power loss.
					
	GUIs Needed:
	
	Recipes Needed:
		ALL
	
	warehouse output GUI -- swap filters from bottom to top, clone layout from storage block
	mailbox side-select GUI needs cleaned up to mirror worksite side-select GUI		
				
	API / compat stuff:
		add IMC-based API to add logs/saplings to forestry farm??
		add config-based method to add logs/saplings to forestry farm??	
		
	warehouse needs to eject/limit item access when currentMaxStorage<currentStorage
		how to handle partially loaded warehouses, e.g. some of its storage blocks may be in unloaded chunks?
		--perhaps have different methods for tile.invalidate() and onBlockBroken
	
	Power network:
		Generators:
			Solid Fuel (sterling) 1e/t gen, 1000 max, 10 out
			Water (waterwheel) 0-0.2e/t gen, 100 max, 1 out
			NPC (hand cranked engine) 50e/work, 100 max, 1 out
		Storage:	
			Flywheel 10000 max, 100 in, 100 out
		Transport:
			Conduit 100 max, 10 in, 10 out
			ConduitHighGrade 1000 max, 100 in, 100 out
			Junction (bc-compat) 1000 max, 100 in, 100 out
			Distributor	(bc-compat) 1000 max, 100 in, 100 out		
	
npcs module
	* npc vendor type
		player-owned npc that has a customizable trade list via GUI.
		owning players can setup the trades and give the npc their 'stock'
		owning players can withdraw the proceeds from bartering, and restock the vendor
		non-owning players can access the vendors trade screen to barter

	? add rendering of routes when npc-order item is being held
		work-order renders route + numbers
		routing-order renders route + sides
		combat-order renders patrol and guard points/targets
		
	* add town-hall block GUI
		tracks nearby entities.
		maintains list of dead-entity-data (they transmit to town-hall on death)
			this can be viewed by user
			? priests may occasionally use this to 'resurrect' a dead npc
		?can serve as a central upkeep-point for NPCs
		can issue a 'call to arms' command to all nearby teamed npcs
			combat npcs will respond to the point in question 
			worker npcs will move to the town-hall for a certain period of time
		occasionally broadcast to all npcs in broadcast range (set from gui) to set town-hall point			
		
	* add 'alert' ai to workers/combat/courier npcs to trigger
		triggers when npc has an AI attack target and is within range of a town hall
		  or when a worker npc is attacked / fleeing from an enemy
		causes town-hall to send out
						
	* add recipes to copy upkeep/work/combat/routing orders
	* add npc factions system
		will have multiple factions:
			pirates
			vikings
			brigands
			jungle natives
			??
		will have two tiers of npcs:
			normal -- use base faction number for if should attack
			elite guard -- use a higher number for if should attack -- have to have really good standing to be 'neutral' with them
		Each faction will have multiple NPC types:
			soldier / elite soldier
			archer / elite archer
			trader
			priest/medic (combo)
			commander / leader (elite version)
		Npc faction sub-types will have specific equipment, non-player configurable, set at spawn time, that vary by
			faction.  Cosmetic only.  Such as:
				pirate.archer = musket
				brigand.archer = crossbow
				viking.archer = bow
				natives.archer = spear
				brigand.soldier = sword
				pirate.soldier = cutlass
		Each 'faction' will have its own NPC base-class -- so players can i.e. specify npcs to be hostile vs brigands but not pirates.				

	* add other 'misc' npc types -- vendor??			
		
	? add method to 'recruit' a factioned NPC that you are on high-standing with
	
	* add faction structure control block
		for use by structure creators.
		respawns faction-based npcs and attempts to keep them within the bounds designated in the block
		controls only accessible to players in creative mode
	
	
vehicles module
	figure out collision detection for large rectangular entities
		examine collision detection for ender-dragon?
	everything
	
NPCS INFO:
	Town Hall (block):
		Coordinates AI amongst nearby player-owned NPCs.
		Combat NPCs issue 'combat alerts' when they engage in combat, worker npcs issue combat alerts when they are attacked/flee from a target
			this triggers a force-attack command to other nearby combat npcs
			this triggers a force-move-to command to other nearby worker npcs

	Command Baton:
		persistent list of entities commanded.
		stored in item-stack nbt as a list of UUIDs
		list is looked client side from item-nbt
		npcs must transmit UUID to client-side for lookup
		players may add to / remove from list by right-click of item while targeting a commandable NPC
		Commands -- move / guard / attack / attack area / set home / clear home / set upkeep / clear upkeep / clear command
		Client renders list of commanded npcs for baton while equipped
		Client renders under-cursor target while baton is equipped
		Has 5 hotkeys to control commands
			z-clear current command / openGUI (reg/sneak)
			x-attack / attack area (entity/block)
			c-move / guard (entity/block)
			v-set/clear home (reg/sneak)
			b-set/clear upkeep (reg/sneak)		
		
	Teams:
		All teams are derived from owning players team.
		If owning player is not on a team, or npc is not owned, they are considered NEUTRAL.  
		Neutral will not attack other teams, but will defend themselves vs attacks and attack 'bandits'. 
		Bandits / hostile NPCs will not be part of the team system and will have customized AI
		Combat npcs will attack other combat NPCS if the attacker has a team and the target has a team, and they are not the same team
	
	all npcs will have full inventory accessibility for equipment slots
		main-hand slot determines work/combat type
		armor slots are used for actual armor
		upkeep slot is for upkeep orders -- where to get the food
		orders slot is for work/combat/route orders -- where to work / what to fight / what items to move	
	
	all npcs will have an 'upkeep order' slot
		simple work-order that denotes a single point for npc upkeep.
		--perhaps have additional variables for the slip such as min / max to withdraw?
	
	all npcs will have an 'orders' slot
		worker = work order
		courer = routing slip
		combat = combat order		
		
		Work Order:
			3 settings - Priority, Timed, Route
			List of work-sites denotes what sites to work.  Setting type denotes when to go to the next worksite and what the next site will be.
		Routing Slip:
			Works pretty much like AW1
		Combat Order:
			Set custom team / player aggro controls
			Patrol path setting / guard setting
			Ability to customize the already config-customized aggro list.
	
	all npcs will have a 'level'
		they should gain experience towards this level with every successful action.
			actions:
				work
				attack
				route items
		how many levels?
		how big an effect should levels have on stats?
		
	all npcs will 'heal' over time on their own, slowly
		player-owned NPCs will require upkeep be met in order to heal
	
	npc types
		worker
			worksite list set by item (orders slot)				
			work type set by primary equipped item type (weapon slot)
				miner=pickaxe
				lumberjack=axe
				farmer=hoe
				craftsman=hammer
				researcher=quill
			work capability set by equipped item quality for miner/lumberjack/farmer			 
			work capability adjusted by npc level for for miner/lumberjack/farmer
			work capability adjusted by npc level*2 for craftsman/researcher
			npc levels stored by work-type.
		courier 
			own npc type, has custom storage inventory, accepts routing slips instead of work-orders
			--backpack items for main inventory slot to determine inventory size (base 9 + bonus)?
			--actually displays/stores inventory in backpack item? --probably easier to not....
		combat
			combat type set by equipped item
				soldier=sword
				commander=special?
				archer=bow
				medic=special?
				combat engineer (repair)=hammer
				siege engineer (vehicle driver)=axe
			soldier damage determined by item equipped / item quality.
			soldier damage adjusted by npc 'level'
				keep level independently per attack type?
				
	all npcs should be capable of riding horses -- they use it purely for transportation speed increase
		
	NpcBase Class
		Inventory Management
		Shared AI and stats setup.
		Upkeep base system.
		Ownership / team base system
		Base AI targeting setup
		
	NpcSubclasses
		Individual AI setups
		Some overrides for team status for 'hostile' NPCs
		
		
//BC Coal-Use: 1m20s/ea = 1mj/tick*20ticks*80seconds = 1600mj / ea
//https://raw.githubusercontent.com/coolAlias/Forge_Tutorials/master/ModdingWithAPIs.java