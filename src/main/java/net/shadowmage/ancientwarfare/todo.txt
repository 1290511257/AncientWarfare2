Licensing
	add bc license for using as libs

core
	crafting system--needs recipes from other modules
	research system--needs definitions of research for research tree
	block and item textures (engineering station, research station, research book, research notes)
	Chunkloader blocks

GUIS (all modules)
	need LOTS of tooltips added to various elements	
	Finish creating proper text-input validation stuff for Text and NumberInput widgets
	SHIFT-CLICK CODE
	rendering of item stack quantities >99 -- need to do custom rendering of text, scaled down appropriately

TEXTURES
	core
	automation
		warehouse input
		warehouse output
		warehouse storage small
		warehouse storage medium 
		warehouse storage large
		warehouse crafting station
		hand-cranked-engine
		sterling generator
		waterwheel generator
	structure
		drafting station
		structure scanner
		structure builder
	npc
	vehicle
	
modeler
	who knows.... will need to start using it to find out what is broken / not working, will need it in vehicle module
	
structures module (done for now)
	Recipes Needed:
		ALL (except for templates in drafting station)
	plugins / support for other modules
	template plugin support for gates
	textures for drafting station, survival-mode builder block
	rework gates as a multi-block? (use controller TE TESR to render gate)
		at that point, can use blocks for collision and interaction
		probably less buggy than the entity-based interaction
		but how to handle only partially loaded gates?

automation module:
	Add profiling stuff to mc-profiler
	
	Add load/save of stored power / state to power-tiles
	
	Custom renders for power-states on power tiles?  Optional?
		would require a client-side config on whether to use custom render
		would also require a server-side config on whether to send the network data or not
		
	IWorker/IWorksite cleanup:
		Need to implement a cleaner interface for workers that does not require worksites 
			keeping a reference to their workers.
		The original intent behind this functioning was to limit how fast work could be accomplished
			at any given site -- but this limits the usefulness of automation methods. 
		Possible solutions:
			1.) Move worksites over to Torque api for power input.
				Move workers over to torque api for power output.
				The amount of power a worker gives to a block depends on his level / tool quality.
				Worksites automatically rescan work bounds when 'on'.  Use redstone to 'turn off'.
				Remove mechanical worker, or change it to a block that decreases energy use per work unit performed.
				Most Worksites will rescan 1 block per tick, taken randomly from a set containing all of the
					blocks in bounds.  remove that block from set.  when set is empty, refill with entire
					work-bounds.  When a block is worked, add it directly back into the rescan set.
				HasWork==targetBlocks!=empty && hasResources && isUnpowered				 
			2.) The current system -works-, it just requires careful management of workers to ensure that
					they call removeWorker() at all appropriate times.  Could possibly move over to a ticked
					validation of workers to remove any invalid ones.
			3.) ??
	
	Torque API:
		Add double removeEnergy(ForgeDirection towards, double amount) to ITorqueGenerator
		Add input/output max/tick code to tiles, reset counter every tile-update.
		Add power-loss to blocks.  The amount lost should be proportionate to the amount stored.  Something about
			drag from air resistance increasing with the speed of the object that is moving. 
		Add high-quality blocks with higher capacity and less power loss.
					
	GUIs Needed:
		Power-display GUI for flywheel, others?
	
	Recipes Needed:
		ALL
	
	worksite target select GUI is non-functional, and/or cannot remove targets
	warehouse output GUI -- swap filters from bottom to top, clone layout from storage block
	mailbox side-select GUI needs cleaned up to mirror worksite side-select GUI		
				
	API / compat stuff:
		add IMC-based API to add logs/saplings to forestry farm??
		add config-based method to add logs/saplings to forestry farm??	
	warehouse needs to eject/limit item access when currentMaxStorage<currentStorage
		how to handle partially loaded warehouses, e.g. some of its storage blocks may be in unloaded chunks?
		--perhaps have different methods for tile.invalidate() and onBlockBroken
	
	Power network:
		Generators:
			Solid Fuel (sterling) 1e/t gen, 1000 max, 10 out
			Water (waterwheel) 0-0.2e/t gen, 100 max, 1 out
			NPC (hand cranked engine) 50e/work, 100 max, 1 out
		Storage:	
			Flywheel 10000 max, 100 in, 100 out
		Transport:
			Conduit 100 max, 10 in, 10 out
			ConduitHighGrade 1000 max, 100 in, 100 out
			Junction (bc-compat) 1000 max, 100 in, 100 out
			Distributor	(bc-compat) 1000 max, 100 in, 100 out		
	
npcs module
	Add profiling stuff to mc-profiler
	
	all npcs will have full inventory accessibility for equipment slots	
	
	Teams:
		All teams are derived from owning players team.
		If owning player is not on a team, or npc is not owned, they are considered NEUTRAL.  
		Neutral will not attack other teams, but will defend themselves vs attacks and attack 'bandits'. 
		Bandits / hostile NPCs will not be part of the team system and will have customized AI
		Combat npcs will attack other combat NPCS if the attacker has a team and the target has a team, and they are not the same team
	
	all npcs will have an 'orders' slot
		worker = work order
		courer = routing slip
		combat = combat order
		
		orders item has slot to set upkeep point?
		
		Work Order:
			3 settings - Priority, Timed, Route
			List of work-sites denotes what sites to work.  Setting type denotes when to go to the next worksite and what the next site will be.
		Routing Slip:
			Works pretty much like AW1
		Combat Order:
			Set custom team / player aggro controls
			Patrol path setting / guard setting
			Ability to customize the already config-customized aggro list.
	
	all npcs will have a 'level'
		they should gain experience towards this level with every successful action.
			actions:
				work
				attack
				patrol
				route items
				food upkeep
		how many levels?
		how big an effect should levels have on stats?
		
	all npcs will 'heal' over time on their own, slowly
		player-owned NPCs will require upkeep be met in order to heal
	
	npc types
		worker
			worksite list set by item (orders slot)				
			work type set by primary equipped item type (weapon slot)
				miner=pickaxe
				lumberjack=axe
				farmer=hoe
				craftsman=hammer
				researcher=quill
			work capability set by equipped item quality
			work capability adjusted by npc 'level'
				keep level independently per work type?
		courier 
			own npc type, has custom storage inventory, accepts routing slips instead of work-orders
		combat
			combat type set by equipped item
				soldier=sword
				commander=special?
				archer=bow
				medic=special?
				combat engineer (repair)=hammer
				siege engineer (vehicle driver)=axe
			soldier damage determined by item equipped / item quality.
			soldier damage adjusted by npc 'level'
				keep level independently per attack type?
				
	all npcs should be capable of riding horses -- they use it purely for transportation speed increase
		
	NpcBase Class
		Inventory Management
		Shared AI and stats setup.
		Upkeep base system.
		Ownership / team base system
		Base AI targeting setup
		
	NpcSubclasses
		Individual AI setups
		Some overrides for team status for 'hostile' NPCs
		
vehicles module
	everything
		
//BC Coal-Use: 1m20s/ea = 1mj/tick*20ticks*80seconds = 1600mj / ea
//https://raw.githubusercontent.com/coolAlias/Forge_Tutorials/master/ModdingWithAPIs.java