vehicles todo:

* vehicle start:
	Movement handling -- need to implement acceleration stuff (incl. gravity)
	** Collision detection
	Turret functionality for the basic siege engines
	Models / textures

* split input handling into movement and interaction?
* implement input handling for multi-passenger vehicles	
* movement handling needs to accomodate acceleration
* during movement resolution set onGround, collidedX, collidedZ vars
* figure out basic missile types
	- regular (stone/iron shot)
	- fire (napalm/naptha)
	- HE (TNT)
	- Airburst
* figure out rocket missile types
	- regular (powered-arrow)
	- fire (flame-arrow)
	- HE (TNT)
	- Airburst (shrapnel)

* clean up OBB stuff
	- allow for multiple OBB per vehicle (e.g. airship, sailboats... pretty much all of them)
	- move all of the temp variables used by OBB off to a separate 'Movement Resolver' class
		- use this class to get movement vectors
		- hmm.. most of the vars are OBB specific though, so this probably wont' help...
	- add config option to disable use of OBB stuff?
	- add config option to disable use of multi-part entity stuff?
	- optimize tested axis in ray-trace movement resolution	

* missile entity for vehicles to fire
	- will require tracking field for firing-entity id
	- will require synching firing-entity id to client
	- need to make rocket-type missile as well (for hwacha)
		- will require special trajectory calculators
	
* large component vehicles
	- has stations that may have cannon/ballista/catapult/hwacha mounted at them (perhaps not actual vehicles, but representations of them) 
* multi passenger vehicles
	- entity.riddenEntity = vehicle
	- vehicle.riddenByEntity = driver
	- vehicle.additionalRiders() = other entities to update
	- should probably make a list of 'vehicle stations' that can be ridden
		-each station is responsible for updating its riders location / rotation
		-stations may be seats or battle-stations
	- stations will be linked to a multi-part-entity collision box that can be clicked on to activate that station
	- will require a GUI for switching between stations (or other keybind...)
* vehicle tier/upgrade system
	- do not have material teirs, just use upgrades for enhanced functionality
	- use click-to-apply upgrades, or slotted?
		one way allows for -all- upgrades to be applied, the other limits to a selected range by player choice
	- specific upgrades for each vehicle? e.g:
		- catapult metal arm
		- trebuchet triple sling
		- ballista metal tensioner
	- use upgrades to determine ammo type		
* vehicle types:
	Land:
		Catapult (single pilot)
		Ballista (single pilot)
		Scorpio (small metal spring-type ballista)
		Trebuchet (single pilot)
		Cannon (single pilot)
		Hwacha (single pilot)
		Battering Ram (single pilot)
		Chest Cart (single pilot)
		Siege Tower (multi-passenger)(need to find a way to 'extend' the tower, and a way for players to 'climb' the tower / get off at the right position (hit 'fire' once climbed appropriately?))
	 Water: (might need to reduce gun counts for easier managing of stuff...)
		Sloop/Pinnace - small multi-passenger, 8 gun max
		Frigate - med multi-passenger, 25 gun max	
		Galleon - large multi-passenger, 50 gun max
	Air:
		Hot Air Balloon
			-burns coal / fuel materials
			-will lose altitude slowly when fuel runs out
		Ornithopter
			-not really a vehicle per-se, more of a jetpack / wearable armor
			- flap to fly, hold flap to glide
		Airship (a small-ish frigate with an elongated hot air balloon above it...)
			-burns coal / fuel materials
			-will be immobile (except for descend command) when out of fuel
		
* vehicles that you can walk around on (or... perhaps not... will be hacky as hell at best)
	- rotate position of entity relative to vehicle rotation, test for rectangular BB to determine if the entity should fall off or not?
	- when vehicle rotates all on-top entities will need to be rotated around for their relative position
	- will use input interception to facilitate movement of player on vehicle
	- will use some sort of fake 'world' for collision detection.  Perhaps just a list of AABBs for the vehicle interior with manual resolution

			